================================================================================
todo:
================================================================================

--------------------------------------------------------------------------------
gameplay
--------------------------------------------------------------------------------

general physics:
    - constraints (particlarly cone twist and hinge constraints)
    - explosions (ghost object + ray casts?) (sphere + contact iteration?)
    - callbacks on collisions

vehicles:
    - constraints (particularly hinge constraint for car doors)
    - study handling.cfg
    - extract graphics and collision meshes from gta vehicles
    - make the bike bank properly
    - add wheels to mesh so that vehicle bottoms out correctly
    - ensure wheels have no friction (maybe tweak contact added for that)

actors:
    - constraints for ragdoll (particlarly cone twist and hinge constraints)
    - extract actor models
    - extract skeleton data
    - lua bindings for hardware animation
    - study bullet character controller
    - play with capsule




--------------------------------------------------------------------------------
cosmetic
--------------------------------------------------------------------------------

weather (caelum? needs cg)

sea water (hydrax? needs cg too)

other water

foilage

skid marks

sparks

variable penumbra

smarter choice of bias

reflections on cars




--------------------------------------------------------------------------------
performance
--------------------------------------------------------------------------------

set up a timeDemo simulation for quantative performance measurements

binary collision file format
binary contains precomputed data for bvh-based collision meshes

background resource loading includes collision meshes

display the occl zones, find out if i can use them for occlusion culling

might be able to do my own tests with some triangles or axis-aligned quads.
make sure that from all angles, all objects whose centres lie behind the quads
are fully occluded.  alternatively check all 8 corners of the aabb of the
object being rendered (better as it's only slow in the occluded case where we
make a saving)

minimising the number of occl zones is very important for performance
(obviously)




--------------------------------------------------------------------------------
user interface
--------------------------------------------------------------------------------

unicode support

tab completion

online help




--------------------------------------------------------------------------------
lua bindings
--------------------------------------------------------------------------------

make terminology consistent, e.g. between physics and graphics

ensure error messages are consistent, e.g. "not a valid XXX member"

fix the mess that is the vector/quaternion exploded vars support

fix boolean args so that they are actually checked rather than just coerced

consistently use resource pointers everywhere, not resource names

When overloaded functions are called with the wrong args, list all options.




--------------------------------------------------------------------------------
modding
--------------------------------------------------------------------------------

implement various effects
-- parallax
-- steep parallax
-- texture animation
-- multitexturing
-- splatting
-- reflections (static env map and dynamic env map)

allow modder to choose subset of effects, providing necessary parameters

group together a large number of environmental options under a common API --
e.g. camera, shadow, ambient lighting, sun, etc.  Allow clear, and reset of
this stuff.



--------------------------------------------------------------------------------
networking
--------------------------------------------------------------------------------

separate graphics from game engine + physics.

work out how early in the pipeline to send stuff to the server and back.
1) keypresses
2) allow local control of car or whatever, server validates not moving too fast

local and remote console
